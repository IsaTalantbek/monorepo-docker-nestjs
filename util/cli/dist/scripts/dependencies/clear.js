import fs from 'fs';
import path from 'path';
import { findProject } from '../find-project.js';
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
export const clearHandler = (argv) => {
    const { appName, silent } = argv;
    if (!appName) {
        console.error('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: cli delete <app-name>');
        process.exit(1);
    }
    const appPath = findProject(appName);
    const node_modulesPath = path.join(process.cwd(), appPath, 'node_modules');
    const package_lockPath = path.join(process.cwd(), appPath, 'package-lock.json');
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è node_modules
    if (fs.existsSync(node_modulesPath)) {
        ifNodeModulesExist(node_modulesPath, silent);
    }
    else {
        silent === false
            ? console.log(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${node_modulesPath} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ.`)
            : null;
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è package-lock.json
    if (fs.existsSync(package_lockPath)) {
        ifPackageLockExist(package_lockPath, silent);
    }
    else {
        silent === false
            ? console.log(`‚ö†Ô∏è –§–∞–π–ª ${package_lockPath} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ.`)
            : null;
    }
};
function ifNodeModulesExist(node_modulesPath, silent) {
    const filesInNodeModules = fs.readdirSync(node_modulesPath);
    if (silent === false) {
        // –ï—Å–ª–∏ node_modules –Ω–µ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º
        if (filesInNodeModules.length > 0) {
            try {
                console.log(`üóëÔ∏è –£–¥–∞–ª—è—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${node_modulesPath}`);
                fs.rmSync(node_modulesPath, { recursive: true, force: true });
                console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${node_modulesPath} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.`);
            }
            catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${node_modulesPath}:`, error.message);
                process.exit(1);
            }
        }
        else {
            console.log(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${node_modulesPath} –ø—É—Å—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ.`);
        }
    }
    else if (silent === true) {
        if (filesInNodeModules.length > 0) {
            try {
                fs.rmSync(node_modulesPath, { recursive: true, force: true });
            }
            catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${node_modulesPath}:`, error.message);
                process.exit(1);
            }
        }
    }
    else {
        console.error('–í pro clear <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞> –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª–∏–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è -s');
    }
}
function ifPackageLockExist(package_lockPath, silent) {
    if (silent === false) {
        try {
            console.log(`üóëÔ∏è –£–¥–∞–ª—è—é —Ñ–∞–π–ª: ${package_lockPath}`);
            fs.unlinkSync(package_lockPath); // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            console.log(`‚úÖ –§–∞–π–ª ${package_lockPath} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${package_lockPath}:`, error.message);
            process.exit(1);
        }
    }
    else if (silent === true) {
        try {
            fs.unlinkSync(package_lockPath); // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${package_lockPath}:`, error.message);
            process.exit(1);
        }
    }
    else {
        console.error('–í pro clear <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞> –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª–∏–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è -s');
    }
}
